# pythonSetupPyPipeline

## Description

Pipeline for building, validating and deploying Python modules.

To create a Python project skeleton use this [Python cookiecutter template](https://github.com/tomtom-international/cookiecutter-python).

### Dependencies

## Parameters

### pypiRepo

Python PyPI repository URL, eg. `https://test.pypi.org/legacy/`

### pypiCredentials (DEPRECATED)

**DEPRECATED**: Use `pypiCredentialsId` instead.

### pypiCredentialsId

Jenkins credentials id used to publish the Python module the specified PyPI repository.

### sshAgentUser

SSH agent user used for committing the version bump in release mode (`doRelease` parameter).

### dockerFilename

A [multi-stage Dockerfile](https://docs.docker.com/develop/develop-images/multistage-build/) for producing intermediate build/test and deployment images and
the production image to be pushed to the specified Docker registry.

The *builder* stage is used by the build and validation stages whereas the *deploy_builder* stage is used for the Docker deployment.

**Requirements**:
The multi-stage build consists out of two stages:

* builder: Install all the Python development dependencies defined in *requirements_dev.txt*
* deploy_builder: Install virtualenv, copy the whole code and generate a source distribution package (python setup.py sdist) and install the generated package.
* production image: This is the image that will contain only the Python module and gets pushed to the Docker registry.

**Example**:

```dockerfile
ARG PYTHON_BASE=python:3.6.7-alpine3.7

# Create a stage for running build and validation stages (lint, tests)
FROM tomtom-docker-registry.bintray.io/python/python3-pkg-builder:0.0.22 AS builder
COPY requirements_dev.txt /
RUN pip install -r /requirements_dev.txt

# Create the stage for installing a source distribution package
FROM $PYTHON_BASE AS deploy_builder
RUN pip install --upgrade virtualenv==16.4.3 && python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY . /code
WORKDIR /code
RUN python setup.py sdist && pip install dist/*

# Create the real image with the Python module only.
FROM $PYTHON_BASE
COPY --from=deploy_builder /opt/venv /opt/venv

LABEL io.whalebrew.name "my-cli"
LABEL io.whalebrew.config.working_dir "$PWD"

ENV PATH="/opt/venv/bin:$PATH"
ENTRYPOINT ["my-cli"]
```

**Default**: `Dockerfile`

### dockerBuildArgs

Possibility to provide additional Docker build arguments.

Base arguments are:

```bash
--no-cache \
--network host
```

### dockerRunArgs

Possibility to provide additional Docker run arguments.

Base arguments are:

```bash
-v /etc/passwd:/etc/passwd:ro \
-v /opt/jenkins/.ssh:/opt/jenkins/.ssh:ro \
--network host
```

### dockerDeploy

Set to true if a Docker image with the Python module should be built and pushed to a Docker registry.

### dockerRegistryUrl

The Docker registry URL where the Docker image should be deployed to (eg. `https://registry.example.com`).

### dockerRegistryCredentialsId

Jenkins credentials id used to publish the Docker image to the Docker registry.

### dockerRepo

Name of the repository the Docker image will be deployed to.

**Example**:

For a Python module `foo` and `tomtom` as `dockerRepo` the image will be called `tomtom/foo`.

The tag of the image is based on the version of the Python module version.

## Snippet

```groovy
@Library(value="github.com/tomtom-international/jsl@master", changelog=false) _

pythonSetupPyPipeline \
  dockerFilename: "Dockerfile.build", \
  dockerDeploy: true, \
  dockerRegistryCredentialsId: "docker-credential", \
  dockerRegistry: "https://docker.acme.org", \
  dockerRepo: "acme", \
  dockerDeployFile: "Dockerfile.deploy", \
  pypiRepo: "https://test.pypi.org/legacy/", \
  pypiCredentials: "pypi-credential", \
  sshAgentUser: "ssh_svc_ci"
```
