# pythonSetupPyPipeline

## Description

Pipeline for building, validating and deploying Python modules.

To create a Python project skeleton use this [Python cookiecutter template](https://github.com/tomtom-international/cookiecutter-python).

### Dependencies

## Parameters

### pypiRepo

Python PyPI repository URL, eg. `https://test.pypi.org/legacy/`

### pypiCredentials (DEPRECATED)

**DEPRECATED**: Use `pypiCredentialsId` instead.

### pypiCredentialsId

Jenkins credentials id used to publish the Python module the specified PyPI repository.

### sshAgentUser

SSH agent user used for committing the version bump in release mode (`doRelease` parameter).

### dockerFilename (DEPRECATED)

**DEPRECATED**: Use `dockerBuildFile` instead.

### dockerBuildFile

The build and validation stages are executed in context of a Docker container. This container is based on the image defined by this file.

**Default**: `Dockerfile.build`

### dockerBuildArgs

Possibility to provide additional Docker build arguments.

Base arguments are:

```bash
--no-cache \
--network host
```

### dockerRunArgs

Possibility to provide additional Docker run arguments.

Base arguments are:

```bash
-v /etc/passwd:/etc/passwd:ro \
-v /opt/jenkins/.ssh:/opt/jenkins/.ssh:ro \
--network host
```

### dockerDeploy

Set to true if a Docker image with the Python module should be built and pushed to a Docker registry.

### dockerRegistryUrl

The Docker registry URL where the Docker image should be deployed to (eg. `https://registry.example.com`).

### dockerRegistryCredentialsId

Jenkins credentials id used to publish the Docker image to the Docker registry.

### dockerRepo

Name of the repository the Docker image will be deployed to.

**Example**:

For a Python module `foo` and `tomtom` as `dockerRepo` the image will be called `tomtom/foo`.

The tag of the image is based on the version of the Python module version.

### dockerDeployFile

Dockerfile containing directives to build the image with the Python module that will be deployed to the specified Docker registry.

> **Requirement**:
> Before the *Deploy Docker* stage uses this Dockerfile, the pipeline generates a distribution package (`python setup.py sdist`) within the *dist/*
> directory. This directory, incl. its content, has to be copied to the builder image which then will be installed by *pip* into a virtualenv within
> the builder image.
> As a last step the whole virtualenv directory will be copied to the final Docker image that gets later on deployed to the specified Docker registry.

**Example**:

```dockerfile
FROM python:3.6.7-alpine3.7 as base

FROM base as builder
RUN pip install --upgrade virtualenv==16.4.3 && python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

COPY dist /dist
RUN pip install /dist/*

FROM base
COPY --from=builder /opt/venv /opt/venv

ENV PATH="/opt/venv/bin:$PATH"
CMD ["<your-console-scripts"]
```

## Snippet

```groovy
@Library(value="github.com/tomtom-international/jsl@master", changelog=false) _

pythonSetupPyPipeline \
  dockerFilename: "Dockerfile.build", \
  dockerDeploy: true, \
  dockerRegistryCredentialsId: "docker-credential", \
  dockerRegistry: "https://docker.acme.org", \
  dockerRepo: "acme", \
  dockerDeployFile: "Dockerfile.deploy", \
  pypiRepo: "https://test.pypi.org/legacy/", \
  pypiCredentials: "pypi-credential", \
  sshAgentUser: "ssh_svc_ci"
```
